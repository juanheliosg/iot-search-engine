#Docker-compose for the iot-search-engine

#Kafka and Druid based in https://github.com/ramkumarvenkat/kafka-spark-streaming-druid
#Change passwords for production use
version: "3"

volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}

services:
  # Zookeeper
  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:3'
    ports:
      - '2181:2181'
    environment:
      - ZOO_MY_ID=1
      - ALLOW_ANONYMOUS_LOGIN=yes
  # Kafka
  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - 9094:9094
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

#Postgres druid config container
  postgres:
    container_name: postgres
    image: postgres:13
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
#Druid coordinator
  coordinator:
    image: apache/druid:0.20.0
    container_name: coordinator
    volumes:
      - ./storage:/opt/data
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - druidEnv
#Druid broker
  broker:
    image: apache/druid:0.20.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - druidEnv
#Druid historical
  historical:
    image: apache/druid:0.20.0
    container_name: historical
    volumes:
      - ./storage:/opt/data
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - druidEnv
#Druid middlemanager
  middlemanager:
    image: apache/druid:0.20.0
    container_name: middlemanager
    volumes:
      - ./storage:/opt/data
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
    command:
      - middleManager
    env_file:
      - druidEnv
#Druid router
  router:
    image: apache/druid:0.20.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - druidEnv

  cassandra:
    image: cassandra:3
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - "MAX_HEAP_SIZE=256M"
      - "HEAP_NEWSIZE=128M"
    restart: always
    volumes:
      - ./out/cassandra_data:/var/lib/cassandra

  cassandra-load-keyspace:
    container_name: cassandra-load-keyspace
    image: cassandra:3
    depends_on:
      - cassandra
    volumes:
      - ./extractor/resources/cassandra_schema.cql:/schema.cql
    command: /bin/bash -c "echo loading cassandra keyspace && cqlsh cassandra -f /schema.cql"

  extractor-seed:
    container_name: extractor-seed
    image: iot-se-extractor:latest
    ports:
      - '1600:1600'
      - "1700:1700"
    depends_on:
      - kafka
      - cassandra-load-keyspace
    environment:
      CLUSTER_PORT: 1600
      PLAY_HTTP_PORT: 1700 
      CLUSTER_IP: extractor-seed
      SEED_PORT_1600_TCP_PORT: 1600
      SEED_PORT_1600_TCP_ADDR: extractor-seed
      CASSANDRA_CONTACT_POINTS: cassandra:9042

